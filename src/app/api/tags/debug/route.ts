import { NextResponse } from 'next/server'
import { Client } from '@notionhq/client'

const notion = new Client({
  auth: process.env.NOTION_TOKEN,
})

const DATABASE_ID = process.env.NOTION_DATABASE_ID!
const DEBUG_SECRET = process.env.DEBUG_SECRET || process.env.REVALIDATE_SECRET // ÎîîÎ≤ÑÍ∑∏Ïö© ÏãúÌÅ¨Î¶ø ÌÜ†ÌÅ∞

/**
 * GET /api/tags/debug
 *
 * ÎîîÎ≤ÑÍπÖÏö© ÏóîÎìúÌè¨Ïù∏Ìä∏ - Ïã§Ï†ú Notion Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÌôïÏù∏
 * ProductionÏóêÏÑúÎäî ÎπÑÌôúÏÑ±ÌôîÎêòÎ©∞, Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎèÑ Bearer ÌÜ†ÌÅ∞ Ïù∏Ï¶ù ÌïÑÏöî
 */
export async function GET(request: Request) {
  try {
    // 1. Production ÌôòÍ≤ΩÏóêÏÑúÎäî Ï†ëÍ∑º Ï∞®Îã®
    if (process.env.NODE_ENV === 'production') {
      return NextResponse.json(
        { error: 'Not found' },
        { status: 404 }
      )
    }

    // URL Í∞ùÏ≤¥ ÏÉùÏÑ±ÌïòÏó¨ ÏïàÏ†ÑÌïòÍ≤å ÌååÎùºÎØ∏ÌÑ∞ Ï∂îÏ∂ú
    const url = new URL(request.url)
    const searchParams = url.searchParams

    // 2. Bearer ÌÜ†ÌÅ∞ Í≤ÄÏ¶ù
    const authHeader = request.headers.get('Authorization')
    const token = searchParams.get('token') // ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞Î°úÎèÑ Î∞õÏùÑ Ïàò ÏûàÎèÑÎ°ù

    const providedToken = authHeader?.replace('Bearer ', '') || token

    if (!providedToken || !DEBUG_SECRET || providedToken !== DEBUG_SECRET) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    console.log('üîç Starting debug analysis...')

    // 3. URL ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú ÏòµÏÖò ÌååÏã±
    const pageSizeParam = searchParams.get('page_size')
    const parsedPageSize = parseInt(pageSizeParam || '5', 10)
    // NaN Ï≤¥ÌÅ¨ ÌõÑ ÏïàÏ†ÑÌïú Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©, 1-100 Î≤îÏúÑÎ°ú Ï†úÌïú
    const pageSize = isNaN(parsedPageSize)
      ? 5
      : Math.max(1, Math.min(parsedPageSize, 100))

    const statusFilter = searchParams.get('status') || 'Published'

    // Ï≤´ Î≤àÏß∏ ÌéòÏù¥ÏßÄÎßå Í∞ÄÏ†∏ÏôÄÏÑú Íµ¨Ï°∞ Î∂ÑÏÑù
    const response = await notion.databases.query({
      database_id: DATABASE_ID,
      filter: {
        property: 'status',
        select: {
          equals: statusFilter,
        },
      },
      page_size: pageSize, // Ìï≠ÏÉÅ 1-100 ÏÇ¨Ïù¥Ïùò Ï†ïÏàò
    })

    const debugInfo = {
      totalResults: response.results.length,
      hasMore: response.has_more,
      samplePosts: response.results.map((page: any) => {
        const properties = page.properties
        return {
          id: page.id,
          title: properties.title?.title?.[0]?.plain_text || 'No title',
          status: properties.status?.select?.name || 'No status',
          tags: {
            raw: properties.tags,
            processed: properties.tags?.multi_select?.map((tag: any) => ({
              id: tag.id,
              name: tag.name,
              color: tag.color,
              isEmpty: !tag.name || tag.name.trim().length === 0
            })) || []
          }
        }
      }),
      // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà Ï†ïÎ≥¥
      databaseSchema: null as any
    }

    // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§ÎßàÎèÑ Í∞ÄÏ†∏Ïò§Í∏∞
    try {
      const dbInfo = await notion.databases.retrieve({ database_id: DATABASE_ID })
      debugInfo.databaseSchema = {
        title: (dbInfo as any).title || 'Database',
        properties: Object.keys(dbInfo.properties).reduce((acc: any, key) => {
          const prop = (dbInfo.properties as any)[key]
          acc[key] = {
            type: prop.type,
            name: prop.name || key
          }
          return acc
        }, {})
      }
    } catch (schemaError) {
      console.error('Error fetching database schema:', schemaError)
    }

    console.log('üîç Debug info collected:', JSON.stringify(debugInfo, null, 2))

    return NextResponse.json(debugInfo)
  } catch (error) {
    console.error('‚ùå Debug API error:', error)
    
    return NextResponse.json(
      { 
        error: 'Failed to fetch debug info',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}